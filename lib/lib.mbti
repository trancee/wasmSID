package "trancee/wasmSID/lib"

import(
  "trancee/wasmSID/lib/cpu"
  "trancee/wasmSID/lib/types"
)

// Values
let cia1_mem_start : Int

let cia2_mem_start : Int

fn clear(Memory) -> Unit

fn clear_flags(C64) -> Unit

fn clear_registers(C64) -> Unit

fn emulate(CIA, Int) -> Bool

fn get_flags(C64) -> @cpu.Flags

fn get_registers(C64) -> @cpu.Registers

fn hook(Memory, Int, Int, (@types.UInt16, Bool) -> @types.UInt8, (@types.UInt16, @types.UInt8, Bool) -> Unit) -> Unit

fn initC64(C64) -> Unit!

fn initCPU(C64, baseaddress? : Int) -> Unit

fn load(NES, FixedArray[Int], addr~ : Int = .., length~ : Int = ..) -> Unit

fn pc(NES) -> Int

fn process(PSID) -> Unit!

fn push(NES, @types.UInt8) -> Unit

fn push16(NES, @types.UInt16) -> Unit

fn read(Memory, @types.UInt16, dummy~ : Bool = ..) -> @types.UInt8

fn read_direct(Memory, @types.UInt16) -> @types.UInt8

fn reset(CIA, videoStandard~ : VideoStandard = ..) -> Unit

fn setA(C64, Int) -> Unit

fn set_bank(C64, IOPort) -> Unit

fn set_flags(NES, @types.UInt8) -> Unit

fn set_interrupt_flag(C64) -> Unit

fn step(NES) -> Int

fn to_string(Exception) -> String

let vic_mem_start : Int

fn videoStandard(PSID) -> VideoStandard

fn write(Memory, @types.UInt16, @types.UInt8, dummy~ : Bool = ..) -> Unit

fn write_array(C64, C64register, Array[@types.UInt8]) -> Unit

fn write_direct(Memory, @types.UInt16, @types.UInt8) -> Unit

// Types and methods
type ADSR

type ADSRState

type Bank
impl Eq for Bank

pub struct C64 {
  baseaddress : @types.UInt16
  mem : Memory
  bank : FixedArray[Bank]
  cpu : @cpu.CPU
  sid : Array[SID]
  cia : Array[CIA]
  vic : VIC
  model : FixedArray[Model]
  realSID : Bool
  mut sampleRate : Int
  highQuality : Bool
  stereo : Bool
  playbackSpeed : Int
  paused : Bool
  videoStandard : VideoStandard
  mut cpuFrequency : CPUClock
  mut sampleClockRatio : Int
  selectedModel : Model
  mainVolume : Double
  mut attenuation : Int
  timerSource : Int
  mut frameCycles : Int
  mut frameCycleCnt : Int
  mut prevRasterLine : Int
  mut sampleCycleCnt : Int
  mut overSampleCycleCnt : Int
  mut finished : Bool
  returned : Bool
  mut irq : Bool
  mut nmi : Bool
  mut prevNMI : Bool
  debug : Bool
}
impl C64 {
  clear_flags(Self) -> Unit
  clear_registers(Self) -> Unit
  emulate(Self) -> Output
  get_flags(Self) -> @cpu.Flags
  get_registers(Self) -> @cpu.Registers
  hook(Self, Int, (Int) -> Unit) -> Unit
  initC64(Self) -> Unit!
  initCPU(Self, baseaddress? : Int) -> Unit
  load(Self, FixedArray[Int], offset~ : Int = .., length~ : Int = .., has_load_address~ : Bool = ..) -> Int
  new(baseaddress~ : Int = .., mem? : Memory, data~ : FixedArray[Int] = .., address~ : Int = .., length~ : Int = .., sampleRate~ : Int = .., model~ : FixedArray[Model] = .., videoStandard~ : VideoStandard = .., realSID~ : Bool = .., debug~ : Bool = ..) -> Self
  op_set(Self, C64register, @types.UInt8) -> Unit
  pc(Self) -> Int
  push(Self, @types.UInt8) -> Unit
  push16(Self, @types.UInt16) -> Unit
  read(Self, Int, dummy~ : Bool = ..) -> Int
  reset(Self) -> Unit!
  setA(Self, Int) -> Unit
  set_bank(Self, IOPort) -> Unit
  set_flags(Self, @types.UInt8) -> Unit
  set_interrupt_flag(Self) -> Unit
  write(Self, Int, Int, dummy~ : Bool = ..) -> Unit
  write_array(Self, C64register, Array[@types.UInt8]) -> Unit
  write_word(Self, C64register, @types.UInt16) -> Unit
}

pub(all) enum C64register {
  D6510
  R6510
  UNUSED
  ADRAY1
  ADRAY2
  CHARAC
  ENDCHR
  INTEGR
  TRMPOS
  VERCK
  COUNT
  DIMFLG
  VALTYP
  INTFLG
  GARBFL
  SUBFLG
  INPFLG
  TANSGN
  CHANNL
  LINNUM
  TEMPPT
  LASTPT
  TEMPST
  INDEX
  RESHO
  TXTTAB
  VARTAB
  ARYTAB
  STREND
  FRETOP
  FRESPC
  MEMSIZ
  CURLIN
  OLDLIN
  OLDTXT
  DATLIN
  DATPTR
  INPPTR
  VARNAM
  VARPNT
  FORPNT
  OPPTR
  OPMASK
  DEFPNT
  DSCPNT
  FOUR6
  JMPER
  FAC1
  FACEXP
  FACHO
  FACSGN
  SGNFLG
  BITS
  AFAC
  ARGEXP
  ARGHO
  ARGSGN
  ARISGN
  FACOV
  FBUFPT
  CHRGET
  CHRGOT
  TXTPTR
  RNDX
  STATUS
  STKEY
  SVXT
  VERCKK
  C3PO
  BSOUR
  SYNO
  XSAV
  LDTND
  DFLTN
  DFLTO
  PRTY
  DPSW
  MSGFLG
  FNMIDX
  PTR1
  PTR2
  TIME
  TSFCNT
  TBTCNT
  CNTDN
  BUFPNT
  INBIT
  BITC1
  RINONE
  RIDATA
  RIPRTY
  SAL
  EAL
  CMPO
  TAPE1
  BITTS
  NXTBIT
  RODATA
  FNLEN
  LA
  SA
  FA
  FNADR
  ROPRTY
  FSBLK
  MYCH
  CAS1
  STAL
  MEMUSS
  LSTX
  NDX
  RVS
  INDX
  LXSP
  SFDX
  BLNSW
  BLNCT
  GDBLN
  BLNON
  CRSW
  PNT
  PNTR
  QTSW
  LNMX
  TBLX
  SCHAR
  INSRT
  LDTB1
  USER
  KEYTAB
  RIBUF
  ROBUF
  FREKZP
  BASZPT
  ASCWRK
  BAD
  STACK
  BSTACK
  BUF
  LAT
  FAT
  SAT
  KEYD
  MEMSTR
  MEMEND
  TIMOUT
  COLOR
  GDCOL
  HIBASE
  XMAX
  RPTFLG
  KOUNT
  DELAY
  SHFLAG
  LSTSHF
  KEYLOG
  MODE
  AUTODN
  M51CTR
  M51CDR
  M51AJB
  RSSTAT
  BITNUM
  BAUDOF
  RIDBE
  RIDBS
  RODBS
  RODBE
  IRQTMP
  ENABL
  TODSNS
  TRDTMP
  TD1IRQ
  TLNIDX
  TVSFLG
  SPR11
  IERROR
  IMAIN
  ICRNCH
  IQPLOP
  IGONE
  IEVAL
  SAREG
  SXREG
  SYREG
  SPREG
  USRPOK
  USRADD
  CINV
  CNBINV
  NMINV
  IOPEN
  ICLOSE
  ICHKIN
  ICKOUT
  ICLRCH
  IBASIN
  IBSOUT
  ISTOP
  IGETIN
  ICLALL
  USRCMD
  ILOAD
  ISAVE
  TBUFFR
  SPR13
  SPR14
  SPR15
  VICSCN
  SPNTRS
  CARTROM
  BASICROM
  KERNALROM
  COLD
  WARM
  READY
  CHROUT
  GETIN
  NMI
  RESET
  IRQ
}
impl Eq for C64register
impl Show for C64register

type CIA
impl CIA {
  emulate(Self, Int) -> Bool
  new(mem? : Memory, Int, videoStandard~ : VideoStandard = .., debug~ : Bool = ..) -> Self
  reset(Self, videoStandard~ : VideoStandard = ..) -> Unit
}

type CIAInterruptControl
impl Default for CIAInterruptControl
impl Show for CIAInterruptControl

type CIAInterruptEnable
impl Default for CIAInterruptEnable
impl Show for CIAInterruptEnable

type CIARegister
impl Show for CIARegister

type CIAregister
impl Eq for CIAregister
impl Show for CIAregister

type CPUClock
impl Eq for CPUClock
impl Show for CPUClock

pub type CRA @types.UInt8
impl Compare for CRA
impl Eq for CRA

type CRAFlags

pub type CRB @types.UInt8
impl Compare for CRB
impl Eq for CRB

type CRBFlags

type Channel
impl Eq for Channel
impl Show for Channel

type Color

type ControlA
impl Eq for ControlA
impl Show for ControlA

type ControlB
impl Show for ControlB

type ControlRegister
impl Default for ControlRegister

type ControlRegisterHorizontal

type ControlRegisterVertical

type Coordinate
impl Default for Coordinate

type Envelope
impl Default for Envelope
impl Show for Envelope

type Exception
impl Exception {
  to_string(Self) -> String
}
impl Show for Exception

type FilterResonanceControl
impl Show for FilterResonanceControl

type FilterSelect
impl Default for FilterSelect
impl Show for FilterSelect

pub struct Flags {
  player : Int
  mode : Mode
  videoStandard : VideoStandard
  model : FixedArray[Model]
}
impl Eq for Flags
impl Show for Flags

type FrameRate
impl Eq for FrameRate
impl Show for FrameRate

type Hook

pub type ICR @types.UInt8
impl Compare for ICR
impl Eq for ICR

type ICRFlags

type IOPort
impl IOPort {
  from_int(@types.UInt8) -> Self
}
impl Default for IOPort
impl Show for IOPort

type InterruptEnable
impl Default for InterruptEnable

type InterruptFlag
impl Default for InterruptFlag
impl Show for InterruptFlag

type Memory
impl Memory {
  clear(Self) -> Unit
  hook(Self, Int, Int, (@types.UInt16, Bool) -> @types.UInt8, (@types.UInt16, @types.UInt8, Bool) -> Unit) -> Unit
  new(length~ : Int = .., value~ : Int = ..) -> Self
  read(Self, @types.UInt16, dummy~ : Bool = ..) -> @types.UInt8
  read_direct(Self, @types.UInt16) -> @types.UInt8
  write(Self, @types.UInt16, @types.UInt8, dummy~ : Bool = ..) -> Unit
  write_direct(Self, @types.UInt16, @types.UInt8) -> Unit
}

type MemoryControlRegister

type Mode
impl Eq for Mode
impl Show for Mode

type Model
impl Eq for Model
impl Show for Model

pub struct NES {
  baseaddress : @types.UInt16
  mem : Memory
  cpu : @cpu.CPU
}
impl NES {
  load(Self, FixedArray[Int], addr~ : Int = .., length~ : Int = ..) -> Unit
  new(baseaddress~ : Int = .., data~ : FixedArray[Int] = .., addr~ : Int = .., length~ : Int = ..) -> Self
  pc(Self) -> Int
  push(Self, @types.UInt8) -> Unit
  push16(Self, @types.UInt16) -> Unit
  set_flags(Self, @types.UInt8) -> Unit
  step(Self) -> Int
}

type Output
impl Default for Output

pub struct PSID {
  mem : Memory
  data : FixedArray[Int]
  mut version : Version
  mut realSID : Bool
  mut digiMode : Bool
  mut loadAddress : Int
  mut initAddress : Int
  mut playAddress : Int
  mut endAddress : Int
  mut title : String
  mut author : String
  mut info : String
  mut songs : @types.UInt16
  mut defaultSong : @types.UInt16
  mut flags : Flags
  mut startPage : @types.UInt8
  mut pageLength : @types.UInt8
  sid2Flags : SIDFlags
  sid3Flags : SIDFlags
  sid4Flags : SIDFlags
  mut sid2Address : @types.UInt8
  mut sid3Address : @types.UInt8
}
impl PSID {
  new(Memory, FixedArray[Int]) -> Self!
  process(Self) -> Unit!
  videoStandard(Self) -> VideoStandard
}

type RunMode
impl Eq for RunMode
impl Show for RunMode

type SID
impl SID {
  new(mem? : Memory, Int, model~ : Model = .., channel~ : Channel = .., videoStandard~ : VideoStandard = .., debug~ : Bool = ..) -> Self
  reset(Self, videoStandard~ : VideoStandard = ..) -> Unit
}

type SIDFlags
impl Eq for SIDFlags
impl Show for SIDFlags

type SIDRegister
impl Show for SIDRegister

type SIDheader
impl Show for SIDheader

type SIDregister
impl Compare for SIDregister
impl Eq for SIDregister
impl Show for SIDregister

type SIDspecs

type SIDwavOutput
impl Default for SIDwavOutput

type ScanLineCycles
impl Eq for ScanLineCycles
impl Show for ScanLineCycles

type ScanLines
impl Eq for ScanLines
impl Show for ScanLines

type SerialMode
impl Eq for SerialMode
impl Show for SerialMode

type TimeOfDay
impl Default for TimeOfDay
impl Show for TimeOfDay

type Timer
impl Default for Timer
impl Show for Timer

type TimerAInputMode
impl Eq for TimerAInputMode
impl Show for TimerAInputMode

type TimerBInputMode
impl Show for TimerBInputMode

type VIC
impl VIC {
  emulate(Self, Int) -> Bool
  new(mem? : Memory, Int, videoStandard~ : VideoStandard = .., debug~ : Bool = ..) -> Self
  reset(Self, videoStandard~ : VideoStandard = ..) -> Unit!
}

type VICRegister

type VICregister
impl Compare for VICregister
impl Eq for VICregister
impl Show for VICregister

type Version
impl Eq for Version
impl Show for Version

type VideoStandard
impl Eq for VideoStandard
impl Show for VideoStandard

type Voice
impl Default for Voice
impl Show for Voice

type VoiceControl
impl Default for VoiceControl
impl Show for VoiceControl

type Wave

type Waveform
impl Eq for Waveform

// Type aliases

// Traits

