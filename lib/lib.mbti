package trancee/wasmSID/lib

alias @trancee/wasmSID/lib/cpu as @cpu

// Values
let cia1_mem_start : Int

let cia2_mem_start : Int

let vic_mem_start : Int

// Types and methods
type ADSR

type ADSRState

type Bank
impl Bank {
  op_equal(Self, Self) -> Bool
}

pub struct C64 {
  pub baseaddress : UInt16
  pub mem : Memory
  pub bank : FixedArray[Bank]
  pub cpu : @cpu.CPU
  pub sid : Array[SID]
  pub cia : Array[CIA]
  pub vic : VIC
  pub model : FixedArray[Model]
  pub realSID : Bool
  pub sampleRate : Int
  pub highQuality : Bool
  pub stereo : Bool
  pub playbackSpeed : Int
  pub paused : Bool
  pub videoStandard : VideoStandard
  pub cpuFrequency : CPUClock
  pub sampleClockRatio : Int
  pub selectedModel : Model
  pub mainVolume : Double
  pub attenuation : Int
  pub timerSource : Int
  pub frameCycles : Int
  pub frameCycleCnt : Int
  pub prevRasterLine : Int
  pub sampleCycleCnt : Int
  pub overSampleCycleCnt : Int
  pub finished : Bool
  pub returned : Bool
  pub irq : Bool
  pub nmi : Bool
  pub prevNMI : Bool
  pub debug : Bool
}
impl C64 {
  clear_flags(Self) -> Unit
  clear_registers(Self) -> Unit
  emulate(Self) -> Output
  get_flags(Self) -> @cpu.Flags
  get_registers(Self) -> @cpu.Registers
  hook(Self, Int, (Int) -> Unit) -> Unit
  initC64(Self) -> Unit!
  initCPU(Self, ~baseaddress? : Int) -> Unit
  load(Self, FixedArray[Int], ~offset : Int = .., ~length : Int = .., ~has_load_address : Bool = ..) -> Int
  new(~baseaddress : Int = .., ~mem? : Memory, ~data : FixedArray[Int] = .., ~address : Int = .., ~length : Int = .., ~sampleRate : Int = .., ~model : FixedArray[Model] = .., ~videoStandard : VideoStandard = .., ~realSID : Bool = .., ~debug : Bool = ..) -> Self
  op_set(Self, C64register, UInt8) -> Unit
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  read(Self, Int, ~dummy : Bool = ..) -> Int
  reset(Self) -> Unit!
  setA(Self, Int) -> Unit
  set_bank(Self, IOPort) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  set_interrupt_flag(Self) -> Unit
  write(Self, Int, Int, ~dummy : Bool = ..) -> Unit
  write_array(Self, C64register, Array[UInt8]) -> Unit
  write_word(Self, C64register, UInt16) -> Unit
}

pub enum C64register {
  D6510
  R6510
  UNUSED
  ADRAY1
  ADRAY2
  CHARAC
  ENDCHR
  INTEGR
  TRMPOS
  VERCK
  COUNT
  DIMFLG
  VALTYP
  INTFLG
  GARBFL
  SUBFLG
  INPFLG
  TANSGN
  CHANNL
  LINNUM
  TEMPPT
  LASTPT
  TEMPST
  INDEX
  RESHO
  TXTTAB
  VARTAB
  ARYTAB
  STREND
  FRETOP
  FRESPC
  MEMSIZ
  CURLIN
  OLDLIN
  OLDTXT
  DATLIN
  DATPTR
  INPPTR
  VARNAM
  VARPNT
  FORPNT
  OPPTR
  OPMASK
  DEFPNT
  DSCPNT
  FOUR6
  JMPER
  FAC1
  FACEXP
  FACHO
  FACSGN
  SGNFLG
  BITS
  AFAC
  ARGEXP
  ARGHO
  ARGSGN
  ARISGN
  FACOV
  FBUFPT
  CHRGET
  CHRGOT
  TXTPTR
  RNDX
  STATUS
  STKEY
  SVXT
  VERCKK
  C3PO
  BSOUR
  SYNO
  XSAV
  LDTND
  DFLTN
  DFLTO
  PRTY
  DPSW
  MSGFLG
  FNMIDX
  PTR1
  PTR2
  TIME
  TSFCNT
  TBTCNT
  CNTDN
  BUFPNT
  INBIT
  BITC1
  RINONE
  RIDATA
  RIPRTY
  SAL
  EAL
  CMPO
  TAPE1
  BITTS
  NXTBIT
  RODATA
  FNLEN
  LA
  SA
  FA
  FNADR
  ROPRTY
  FSBLK
  MYCH
  CAS1
  STAL
  MEMUSS
  LSTX
  NDX
  RVS
  INDX
  LXSP
  SFDX
  BLNSW
  BLNCT
  GDBLN
  BLNON
  CRSW
  PNT
  PNTR
  QTSW
  LNMX
  TBLX
  SCHAR
  INSRT
  LDTB1
  USER
  KEYTAB
  RIBUF
  ROBUF
  FREKZP
  BASZPT
  ASCWRK
  BAD
  STACK
  BSTACK
  BUF
  LAT
  FAT
  SAT
  KEYD
  MEMSTR
  MEMEND
  TIMOUT
  COLOR
  GDCOL
  HIBASE
  XMAX
  RPTFLG
  KOUNT
  DELAY
  SHFLAG
  LSTSHF
  KEYLOG
  MODE
  AUTODN
  M51CTR
  M51CDR
  M51AJB
  RSSTAT
  BITNUM
  BAUDOF
  RIDBE
  RIDBS
  RODBS
  RODBE
  IRQTMP
  ENABL
  TODSNS
  TRDTMP
  TD1IRQ
  TLNIDX
  TVSFLG
  SPR11
  IERROR
  IMAIN
  ICRNCH
  IQPLOP
  IGONE
  IEVAL
  SAREG
  SXREG
  SYREG
  SPREG
  USRPOK
  USRADD
  CINV
  CNBINV
  NMINV
  IOPEN
  ICLOSE
  ICHKIN
  ICKOUT
  ICLRCH
  IBASIN
  IBSOUT
  ISTOP
  IGETIN
  ICLALL
  USRCMD
  ILOAD
  ISAVE
  TBUFFR
  SPR13
  SPR14
  SPR15
  VICSCN
  SPNTRS
  CARTROM
  BASICROM
  KERNALROM
  COLD
  WARM
  READY
  CHROUT
  GETIN
  NMI
  RESET
  IRQ
}
impl C64register {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type CIA
impl CIA {
  emulate(Self, Int) -> Bool
  new(~mem? : Memory, Int, ~videoStandard : VideoStandard = .., ~debug : Bool = ..) -> Self
  reset(Self, ~videoStandard : VideoStandard = ..) -> Unit
}

type CIAInterruptControl
impl CIAInterruptControl {
  default() -> Self
  to_string(Self) -> String
}

type CIAInterruptEnable
impl CIAInterruptEnable {
  default() -> Self
  to_string(Self) -> String
}

type CIARegister
impl CIARegister {
  to_string(Self) -> String
}

type CIAregister
impl CIAregister {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type CPUClock
impl CPUClock {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub type CRA UInt8
impl CRA {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type CRAFlags

pub type CRB UInt8
impl CRB {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type CRBFlags

type Channel
impl Channel {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Color

type ControlA
impl ControlA {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type ControlB
impl ControlB {
  to_string(Self) -> String
}

type ControlRegister
impl ControlRegister {
  default() -> Self
}

type ControlRegisterHorizontal

type ControlRegisterVertical

type Coordinate
impl Coordinate {
  default() -> Self
}

type Envelope
impl Envelope {
  default() -> Self
  to_string(Self) -> String
}

type Exception
impl Exception {
  to_string(Self) -> String
}

type FilterResonanceControl
impl FilterResonanceControl {
  to_string(Self) -> String
}

type FilterSelect
impl FilterSelect {
  default() -> Self
  to_string(Self) -> String
}

pub struct Flags {
  pub player : Int
  pub mode : Mode
  pub videoStandard : VideoStandard
  pub model : FixedArray[Model]
}
impl Flags {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type FrameRate
impl FrameRate {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Hook

pub type ICR UInt8
impl ICR {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type ICRFlags

type IOPort
impl IOPort {
  default() -> Self
  from_int(UInt8) -> Self
  to_string(Self) -> String
}

type InterruptEnable
impl InterruptEnable {
  default() -> Self
}

type InterruptFlag
impl InterruptFlag {
  default() -> Self
  to_string(Self) -> String
}

type Memory
impl Memory {
  clear(Self) -> Unit
  hook(Self, Int, Int, (UInt16, Bool) -> UInt8, (UInt16, UInt8, Bool) -> Unit) -> Unit
  new(~length : Int = .., ~value : Int = ..) -> Self
  read(Self, UInt16, ~dummy : Bool = ..) -> UInt8
  read_direct(Self, UInt16) -> UInt8
  write(Self, UInt16, UInt8, ~dummy : Bool = ..) -> Unit
  write_direct(Self, UInt16, UInt8) -> Unit
}

type MemoryControlRegister

type Mode
impl Mode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Model
impl Model {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct NES {
  pub baseaddress : UInt16
  pub mem : Memory
  pub cpu : @cpu.CPU
}
impl NES {
  load(Self, FixedArray[Int], ~addr : Int = .., ~length : Int = ..) -> Unit
  new(~baseaddress : Int = .., ~data : FixedArray[Int] = .., ~addr : Int = .., ~length : Int = ..) -> Self
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  step(Self) -> Int
}

type Output
impl Output {
  default() -> Self
}

pub struct PSID {
  pub mem : Memory
  pub data : FixedArray[Int]
  pub version : Version
  pub realSID : Bool
  pub digiMode : Bool
  pub loadAddress : Int
  pub initAddress : Int
  pub playAddress : Int
  pub endAddress : Int
  pub title : String
  pub author : String
  pub info : String
  pub songs : UInt16
  pub defaultSong : UInt16
  pub flags : Flags
  pub startPage : UInt8
  pub pageLength : UInt8
  pub sid2Flags : SIDFlags
  pub sid3Flags : SIDFlags
  pub sid4Flags : SIDFlags
  pub sid2Address : UInt8
  pub sid3Address : UInt8
}
impl PSID {
  new(Memory, FixedArray[Int]) -> Self!
  process(Self) -> Unit!
  videoStandard(Self) -> VideoStandard
}

type RunMode
impl RunMode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SID
impl SID {
  new(~mem? : Memory, Int, ~model : Model = .., ~channel : Channel = .., ~videoStandard : VideoStandard = .., ~debug : Bool = ..) -> Self
  reset(Self, ~videoStandard : VideoStandard = ..) -> Unit
}

type SIDFlags
impl SIDFlags {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SIDRegister
impl SIDRegister {
  to_string(Self) -> String
}

type SIDheader
impl SIDheader {
  to_string(Self) -> String
}

type SIDregister
impl SIDregister {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SIDspecs

type SIDwavOutput
impl SIDwavOutput {
  default() -> Self
}

type ScanLineCycles
impl ScanLineCycles {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type ScanLines
impl ScanLines {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SerialMode
impl SerialMode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type TimeOfDay
impl TimeOfDay {
  default() -> Self
  to_string(Self) -> String
}

type Timer
impl Timer {
  default() -> Self
  to_string(Self) -> String
}

type TimerAInputMode
impl TimerAInputMode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type TimerBInputMode
impl TimerBInputMode {
  to_string(Self) -> String
}

pub type UInt16 Int
impl UInt16 {
  compare(Self, Self) -> Int
  default() -> Self
  op_equal(Self, Self) -> Bool
  to_hex(Self) -> String
  to_string(Self) -> String
}

pub type UInt8 Int
impl UInt8 {
  compare(Self, Self) -> Int
  default() -> Self
  op_equal(Self, Self) -> Bool
  to_hex(Self) -> String
  to_string(Self) -> String
}

type VIC
impl VIC {
  emulate(Self, Int) -> Bool
  new(~mem? : Memory, Int, ~videoStandard : VideoStandard = .., ~debug : Bool = ..) -> Self
  reset(Self, ~videoStandard : VideoStandard = ..) -> Unit!
}

type VICRegister

type VICregister
impl VICregister {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Version
impl Version {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type VideoStandard
impl VideoStandard {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Voice
impl Voice {
  default() -> Self
  to_string(Self) -> String
}

type VoiceControl
impl VoiceControl {
  default() -> Self
  to_string(Self) -> String
}

type Wave

type Waveform
impl Waveform {
  op_equal(Self, Self) -> Bool
}

// Type aliases

// Traits

// Extension Methods
impl Show for C64register

impl Show for CIAInterruptControl

impl Show for CIAInterruptEnable

impl Show for CIARegister

impl Show for CIAregister

impl Show for CPUClock

impl Show for Channel

impl Show for ControlA

impl Show for ControlB

impl Show for Envelope

impl Show for Exception

impl Show for FilterResonanceControl

impl Show for FilterSelect

impl Show for Flags

impl Show for FrameRate

impl Show for IOPort

impl Show for InterruptFlag

impl Show for Mode

impl Show for Model

impl Show for RunMode

impl Show for SIDFlags

impl Show for SIDRegister

impl Show for SIDheader

impl Show for SIDregister

impl Show for ScanLineCycles

impl Show for ScanLines

impl Show for SerialMode

impl Show for TimeOfDay

impl Show for Timer

impl Show for TimerAInputMode

impl Show for TimerBInputMode

impl Show for UInt16

impl Show for UInt8

impl Show for VICregister

impl Show for Version

impl Show for VideoStandard

impl Show for Voice

impl Show for VoiceControl

