package "trancee/wasmSID/lib"

import(
  "trancee/wasmSID/lib/cpu"
  "trancee/wasmSID/lib/types"
)

// Values
fn clear(Memory) -> Unit

fn clear_flags(C64) -> Unit

fn clear_registers(C64) -> Unit

fn emulate(CIA, Int) -> Bool

fn get_flags(C64) -> @cpu.Flags

fn get_registers(C64) -> @cpu.Registers

fn hook(Memory, Int, Int, (@types.UInt16, Bool) -> @types.UInt8, (@types.UInt16, @types.UInt8, Bool) -> Unit) -> Unit

fn initC64(C64) -> Unit!

fn initCPU(C64, pc? : @types.UInt16) -> Unit

fn process(PSID) -> Unit!

fn read(Memory, @types.UInt16, dummy~ : Bool = ..) -> @types.UInt8

fn read_direct(Memory, @types.UInt16) -> @types.UInt8

fn reset(CIA, videoStandard~ : VideoStandard = ..) -> Unit

fn setA(C64, Int) -> Unit

fn set_bank(C64, IOPort) -> Unit

fn set_debug(C64, Bool) -> Unit

fn set_interrupt_flag(C64) -> Unit

fn to_string(Exception) -> String

let vic_mem_start : Int

fn videoStandard(PSID) -> VideoStandard

fn write(Memory, @types.UInt16, @types.UInt8, dummy~ : Bool = ..) -> Unit

fn write_array(C64, C64register, Array[@types.UInt8]) -> Unit

fn write_direct(Memory, @types.UInt16, @types.UInt8) -> Unit

// Types and methods
pub struct ADSR {
  state : ADSRState
  mut rateCounter : @types.UInt16
  mut envelopeCounter : Int
  mut exponentCounter : @types.UInt8
}

type ADSRState

type Bank
impl Eq for Bank

pub struct C64 {
  pc : @types.UInt16
  mem : Memory
  bank : FixedArray[Bank]
  cpu : @cpu.CPU
  sid : Array[SID]
  cia : Array[CIA]
  vic : VIC
  model : FixedArray[Model]
  realSID : Bool
  mut sampleRate : Int
  highQuality : Bool
  stereo : Bool
  playbackSpeed : Int
  paused : Bool
  videoStandard : VideoStandard
  mut cpuFrequency : CPUClock
  mut sampleClockRatio : Int
  selectedModel : Model
  mainVolume : Double
  mut attenuation : Int
  timerSource : Int
  mut frameCycles : Int
  mut frameCycleCnt : Int
  mut prevRasterLine : Int
  mut sampleCycleCnt : Int
  mut overSampleCycleCnt : Int
  mut finished : Bool
  returned : Bool
  mut irq : Bool
  mut nmi : Bool
  mut prevNMI : Bool
  mut cycles : Int
  mut debug : Bool
}
impl C64 {
  clear_flags(Self) -> Unit
  clear_registers(Self) -> Unit
  emulate(Self) -> Int
  get_flags(Self) -> @cpu.Flags
  get_registers(Self) -> @cpu.Registers
  initC64(Self) -> Unit!
  initCPU(Self, pc? : @types.UInt16) -> Unit
  load(Self, Bytes, offset~ : Int = .., length~ : Int = .., has_load_address~ : Bool = ..) -> @types.UInt16
  new(pc~ : @types.UInt16 = .., mem? : Memory, data~ : Bytes = .., address~ : @types.UInt16 = .., length~ : Int = .., sampleRate~ : Int = .., model~ : FixedArray[Model] = .., videoStandard~ : VideoStandard = .., realSID~ : Bool = .., debug~ : Bool = ..) -> Self
  op_set(Self, C64register, @types.UInt8) -> Unit
  pc(Self) -> @types.UInt16
  push(Self, @types.UInt8) -> Unit
  push16(Self, @types.UInt16) -> Unit
  read(Self, @types.UInt16, dummy~ : Bool = ..) -> @types.UInt8
  reset(Self) -> Unit!
  setA(Self, Int) -> Unit
  set_bank(Self, IOPort) -> Unit
  set_debug(Self, Bool) -> Unit
  set_flags(Self, @types.UInt8) -> Unit
  set_interrupt_flag(Self) -> Unit
  trap(Self, @types.UInt16, (@cpu.CPU) -> Unit) -> Unit
  write(Self, @types.UInt16, @types.UInt8, dummy~ : Bool = ..) -> Unit
  write_array(Self, C64register, Array[@types.UInt8]) -> Unit
  write_word(Self, C64register, @types.UInt16) -> Unit
}

pub(all) enum C64register {
  D6510
  R6510
  UNUSED
  ADRAY1
  ADRAY2
  CHARAC
  ENDCHR
  INTEGR
  TRMPOS
  VERCK
  COUNT
  DIMFLG
  VALTYP
  INTFLG
  GARBFL
  SUBFLG
  INPFLG
  TANSGN
  CHANNL
  LINNUM
  TEMPPT
  LASTPT
  TEMPST
  INDEX
  RESHO
  TXTTAB
  VARTAB
  ARYTAB
  STREND
  FRETOP
  FRESPC
  MEMSIZ
  CURLIN
  OLDLIN
  OLDTXT
  DATLIN
  DATPTR
  INPPTR
  VARNAM
  VARPNT
  FORPNT
  OPPTR
  OPMASK
  DEFPNT
  DSCPNT
  FOUR6
  JMPER
  FAC1
  FACEXP
  FACHO
  FACSGN
  SGNFLG
  BITS
  AFAC
  ARGEXP
  ARGHO
  ARGSGN
  ARISGN
  FACOV
  FBUFPT
  CHRGET
  CHRGOT
  TXTPTR
  RNDX
  STATUS
  STKEY
  SVXT
  VERCKK
  C3PO
  BSOUR
  SYNO
  XSAV
  LDTND
  DFLTN
  DFLTO
  PRTY
  DPSW
  MSGFLG
  FNMIDX
  PTR1
  PTR2
  TIME
  TSFCNT
  TBTCNT
  CNTDN
  BUFPNT
  INBIT
  BITC1
  RINONE
  RIDATA
  RIPRTY
  SAL
  EAL
  CMPO
  TAPE1
  BITTS
  NXTBIT
  RODATA
  FNLEN
  LA
  SA
  FA
  FNADR
  ROPRTY
  FSBLK
  MYCH
  CAS1
  STAL
  MEMUSS
  LSTX
  NDX
  RVS
  INDX
  LXSP
  SFDX
  BLNSW
  BLNCT
  GDBLN
  BLNON
  CRSW
  PNT
  PNTR
  QTSW
  LNMX
  TBLX
  SCHAR
  INSRT
  LDTB1
  USER
  KEYTAB
  RIBUF
  ROBUF
  FREKZP
  BASZPT
  ASCWRK
  BAD
  STACK
  BSTACK
  PC
  PCL
  PCH
  BUF
  LAT
  FAT
  SAT
  KEYD
  MEMSTR
  MEMEND
  TIMOUT
  COLOR
  GDCOL
  HIBASE
  XMAX
  RPTFLG
  KOUNT
  DELAY
  SHFLAG
  LSTSHF
  KEYLOG
  MODE
  AUTODN
  M51CTR
  M51CDR
  M51AJB
  RSSTAT
  BITNUM
  BAUDOF
  RIDBE
  RIDBS
  RODBS
  RODBE
  IRQTMP
  ENABL
  TODSNS
  TRDTMP
  TD1IRQ
  TLNIDX
  TVSFLG
  SPR11
  IERROR
  IMAIN
  ICRNCH
  IQPLOP
  IGONE
  IEVAL
  SAREG
  SXREG
  SYREG
  SPREG
  USRPOK
  USRADD
  CINV
  CNBINV
  NMINV
  IOPEN
  ICLOSE
  ICHKIN
  ICKOUT
  ICLRCH
  IBASIN
  IBSOUT
  ISTOP
  IGETIN
  ICLALL
  USRCMD
  ILOAD
  ISAVE
  TBUFFR
  SPR13
  SPR14
  SPR15
  VICSCN
  SPNTRS
  CARTROM
  BASICROM
  KERNALROM
  COLD
  WARM
  READY
  CHROUT
  GETIN
  NMI
  RESET
  IRQ
}
impl Eq for C64register
impl Show for C64register

type CIA
impl CIA {
  emulate(Self, Int) -> Bool
  new(mem? : Memory, Int, videoStandard~ : VideoStandard = .., debug~ : Bool = ..) -> Self
  reset(Self, videoStandard~ : VideoStandard = ..) -> Unit
}

pub struct CIAInterruptControl {
  mut timerA : Bool
  mut timerB : Bool
  alarm : Bool
  serial : Bool
  flag : Bool
  mut interrupt : Bool
}
impl Default for CIAInterruptControl
impl Show for CIAInterruptControl

pub struct CIAInterruptEnable {
  mut timerA : Bool
  mut timerB : Bool
  mut alarm : Bool
  mut serial : Bool
  mut flag : Bool
}
impl Default for CIAInterruptEnable
impl Show for CIAInterruptEnable

pub struct CIARegister {
  portA : FixedArray[Bool]
  portB : FixedArray[Bool]
  directionA : FixedArray[Bool]
  directionB : FixedArray[Bool]
  timeOfDay : TimeOfDay
  mut serialData : @types.UInt8
  mut interruptControl : CIAInterruptControl
  interruptEnable : CIAInterruptEnable
  controlA : ControlA
  controlB : ControlB
}
impl Show for CIARegister

pub enum CIAregister {
  PRA
  PRB
  DDRA
  DDRB
  TA_LO
  TA_HI
  TB_LO
  TB_HI
  TOD_10TH
  TOD_SEC
  TOD_MIN
  TOD_HR
  SDR
  ICR
  CRA
  CRB
}
impl Eq for CIAregister
impl Show for CIAregister

type CPUClock
impl Eq for CPUClock
impl Show for CPUClock

pub type CRA @types.UInt8
impl Compare for CRA
impl Eq for CRA

pub enum CRAFlags {
  NONE
  START
  PBON
  OUTMODE
  RUNMODE
  LOAD
  INMODE
  SPMODE
  TODIN
}

pub type CRB @types.UInt8
impl Compare for CRB
impl Eq for CRB

pub enum CRBFlags {
  NONE
  START
  PBON
  OUTMODE
  RUNMODE
  LOAD
  INMODE
  UNDERFLOW
  ALARM
}

type Channel
impl Eq for Channel
impl Show for Channel

pub enum Color {
  Black
  White
  Red
  Cyan
  Purple
  Green
  Blue
  Yellow
  Orange
  Brown
  LightRed
  DarkGray
  MediumGray
  LightGreen
  LightBlue
  LightGray
}

pub struct ControlA {
  mut start : Bool
  mut output : Bool
  mut outputMode : Bool
  mut runMode : RunMode
  mut forceLoad : Bool
  mut inputMode : TimerAInputMode
  mut serialMode : SerialMode
  mut clockFrequency : Bool
}
impl Eq for ControlA
impl Show for ControlA

pub struct ControlB {
  mut start : Bool
  mut output : Bool
  mut outputMode : Bool
  mut runMode : RunMode
  mut forceLoad : Bool
  mut inputMode : TimerBInputMode
  mut writeMode : Bool
}
impl Show for ControlB

pub struct ControlRegister {
  mut rowDisplay : Bool
  mut blankScreen : Bool
  mut bitmapMode : Bool
  mut extendedColorMode : Bool
  mut columnDisplay : Bool
  mut multicolorMode : Bool
  mut videoChipReset : Bool
}
impl Default for ControlRegister

pub struct Coordinate {
  mut x : Int
  mut y : Int
}
impl Default for Coordinate

pub struct Envelope {
  mut attack : Int
  mut decay : Int
  mut sustain : Int
  mut release : Int
}
impl Default for Envelope
impl Show for Envelope

type Exception
impl Exception {
  to_string(Self) -> String
}
impl Show for Exception

pub struct FilterResonanceControl {
  voice : FixedArray[Bool]
  external : Bool
  resonance : Int
}
impl Show for FilterResonanceControl

pub struct FilterSelect {
  mut lowPass : Bool
  mut bandPass : Bool
  mut highPass : Bool
}
impl Default for FilterSelect
impl Show for FilterSelect

pub struct Flags {
  player : Int
  mode : Mode
  videoStandard : VideoStandard
  model : FixedArray[Model]
}
impl Eq for Flags
impl Show for Flags

pub type FrameRate VideoStandard
impl Eq for FrameRate
impl Show for FrameRate

pub struct Hook {
  start : Int
  end : Int
  read : (@types.UInt16, Bool) -> @types.UInt8
  write : (@types.UInt16, @types.UInt8, Bool) -> Unit
}

pub type ICR @types.UInt8
impl Compare for ICR
impl Eq for ICR

pub enum ICRFlags {
  NONE
  TA
  TB
  ALRM
  SP
  FLG
  SC
  IR
}

type IOPort
impl IOPort {
  from_int(@types.UInt8) -> Self
}
impl Default for IOPort
impl Show for IOPort

pub struct InterruptEnable {
  mut rasterCompare : Bool
  mut spriteCollide : Bool
  mut spritesCollide : Bool
  mut lightPenTrigger : Bool
}
impl Default for InterruptEnable

pub struct InterruptFlag {
  mut rasterCompare : Bool
  mut spriteCollide : Bool
  mut spritesCollide : Bool
  mut lightPenTrigger : Bool
  mut interrupt : Bool
}
impl Default for InterruptFlag
impl Show for InterruptFlag

type Memory
impl Memory {
  clear(Self) -> Unit
  hook(Self, Int, Int, (@types.UInt16, Bool) -> @types.UInt8, (@types.UInt16, @types.UInt8, Bool) -> Unit) -> Unit
  new(length~ : Int = .., value~ : Int = ..) -> Self
  read(Self, @types.UInt16, dummy~ : Bool = ..) -> @types.UInt8
  read_direct(Self, @types.UInt16) -> @types.UInt8
  write(Self, @types.UInt16, @types.UInt8, dummy~ : Bool = ..) -> Unit
  write_direct(Self, @types.UInt16, @types.UInt8) -> Unit
}

type Mode
impl Eq for Mode
impl Show for Mode

type Model
impl Eq for Model
impl Show for Model

pub struct NES {
  pc : @types.UInt16
  mem : Memory
  cpu : @cpu.CPU
}
impl NES {
  load(Self, Bytes, addr~ : @types.UInt16 = .., length~ : Int = ..) -> Unit
  new(pc~ : @types.UInt16 = .., data~ : Bytes = .., addr~ : @types.UInt16 = .., length~ : Int = ..) -> Self
  pc(Self) -> @types.UInt16
  push(Self, @types.UInt8) -> Unit
  push16(Self, @types.UInt16) -> Unit
  set_flags(Self, @types.UInt8) -> Unit
  step(Self) -> Int
}

pub struct Output {
  mut left : Int
  mut right : Int
}
impl Default for Output

pub struct PSID {
  mem : Memory
  data : FixedArray[Int]
  mut version : Version
  mut realSID : Bool
  mut digiMode : Bool
  mut loadAddress : Int
  mut initAddress : Int
  mut playAddress : Int
  mut endAddress : Int
  mut title : String
  mut author : String
  mut info : String
  mut songs : @types.UInt16
  mut defaultSong : @types.UInt16
  mut flags : Flags
  mut startPage : @types.UInt8
  mut pageLength : @types.UInt8
  sid2Flags : SIDFlags
  sid3Flags : SIDFlags
  sid4Flags : SIDFlags
  mut sid2Address : @types.UInt8
  mut sid3Address : @types.UInt8
}
impl PSID {
  new(Memory, FixedArray[Int]) -> Self!
  process(Self) -> Unit!
  videoStandard(Self) -> VideoStandard
}

pub enum RunMode {
  OneShot
  Continuous
}
impl Eq for RunMode
impl Show for RunMode

type SID
impl SID {
  new(mem? : Memory, Int, model~ : Model = .., channel~ : Channel = .., videoStandard~ : VideoStandard = .., debug~ : Bool = ..) -> Self
  reset(Self, videoStandard~ : VideoStandard = ..) -> Unit
}

type SIDFlags
impl Eq for SIDFlags
impl Show for SIDFlags

pub struct SIDRegister {
  voice : FixedArray[Voice]
  mut cutoffFrequency : @types.UInt16
  mut filterResonanceControl : FilterResonanceControl
  mut volume : @types.UInt8
  filterSelect : FilterSelect
  mut disconnectVoice : Bool
  input : FixedArray[@types.UInt8]
  mut random : @types.UInt8
  mut envelope : @types.UInt8
}
impl Show for SIDRegister

pub enum SIDheader {
  Magic
  Version
  DataOffset
  LoadAddress
  InitAddress
  PlayAddress
  Songs
  DefaultSong
  Speed
  Title
  Author
  ReleaseInfo
  Flags
  StartPage
  PageLength
  SID2Address
  SID3Address
}
impl Show for SIDheader

pub enum SIDregister {
  FRELO1
  FREHI1
  PWLO1
  PWHI1
  VCREG1
  ATDCY1
  SUREL1
  FRELO2
  FREHI2
  PWLO2
  PWHI2
  VCREG2
  ATDCY2
  SUREL2
  FRELO3
  FREHI3
  PWLO3
  PWHI3
  VCREG3
  ATDCY3
  SUREL3
  CUTLO
  CUTHI
  RESON
  SIGVOL
  POTX
  POTY
  RANDOM
  ENV3
}
impl Compare for SIDregister
impl Eq for SIDregister
impl Show for SIDregister

pub enum SIDspecs {
  CHANNELS
  VOLUME_MAX
  D418_DIGI_VOLUME
}

pub struct SIDwavOutput {
  mut nonFilted : Int
  mut filterInput : Int
}
impl Default for SIDwavOutput

pub type ScanLineCycles VideoStandard
impl Eq for ScanLineCycles
impl Show for ScanLineCycles

pub type ScanLines VideoStandard
impl Eq for ScanLines
impl Show for ScanLines

pub enum SerialMode {
  Output
  Input
}
impl Eq for SerialMode
impl Show for SerialMode

pub struct TimeOfDay {
  mut tenth : @types.UInt8
  mut seconds : @types.UInt8
  mut minutes : @types.UInt8
  mut hours : @types.UInt8
  mut pm : Bool
}
impl Default for TimeOfDay
impl Show for TimeOfDay

pub struct Timer {
  mut latch : Int
  mut counter : Int
}
impl Default for Timer
impl Show for Timer

type TimerAInputMode
impl Eq for TimerAInputMode
impl Show for TimerAInputMode

type TimerBInputMode
impl Show for TimerBInputMode

type VIC
impl VIC {
  emulate(Self, Int) -> Bool
  new(mem? : Memory, Int, videoStandard~ : VideoStandard = .., debug~ : Bool = ..) -> Self
  reset(Self, videoStandard~ : VideoStandard = ..) -> Unit!
}

pub struct VICRegister {
  spritePosition : FixedArray[Coordinate]
  spriteEnable : FixedArray[Bool]
  spriteExpandX : FixedArray[Bool]
  spriteExpandY : FixedArray[Bool]
  spritePriority : FixedArray[Bool]
  spriteMode : FixedArray[Bool]
  spriteCollide : FixedArray[Bool]
  spritesCollide : FixedArray[Bool]
  mut borderColor : Color
  backgroundColor : FixedArray[Color]
  spriteMulticolor : FixedArray[Color]
  spriteColor : FixedArray[Color]
  scroll : Coordinate
  controlRegister : ControlRegister
  interruptFlag : InterruptFlag
  interruptEnable : InterruptEnable
  mut rasterScanLine : Int
  lightPen : Coordinate
  mut characterDataArea : Int
  mut videoMatrixArea : Int
}

pub enum VICregister {
  SP0X
  SP0Y
  SP1X
  SP1Y
  SP2X
  SP2Y
  SP3X
  SP3Y
  SP4X
  SP4Y
  SP5X
  SP5Y
  SP6X
  SP6Y
  SP7X
  SP7Y
  MSIGX
  SCROLY
  RASTER
  LPENX
  LPENY
  SPENA
  SCROLX
  YXPAND
  VMCSB
  VICIRQ
  IRQMASK
  SPBGPR
  SPMC
  XXPAND
  SPSPCL
  SPBGCL
  EXTCOL
  BGCOL0
  BGCOL1
  BGCOL2
  BGCOL3
  SPMC0
  SPMC1
  SP0COL
  SP1COL
  SP2COL
  SP3COL
  SP4COL
  SP5COL
  SP6COL
  SP7COL
  UNUSED
}
impl Compare for VICregister
impl Eq for VICregister
impl Show for VICregister

type Version
impl Eq for Version
impl Show for Version

type VideoStandard
impl Eq for VideoStandard
impl Show for VideoStandard

pub struct Voice {
  mut frequency : @types.UInt16
  mut pulseWidth : @types.UInt16
  mut control : VoiceControl
  envelope : Envelope
}
impl Default for Voice
impl Show for Voice

type VoiceControl
impl Default for VoiceControl
impl Show for VoiceControl

pub struct Wave {
  phaseAccu : Int
  mut prevPhaseAccu : Int
  mut syncSourceMSBrise : Bool
  mut ringSourceMSB : Int
  mut noiseLFSR : Int
  mut prevWavGenOut : Int
  mut prevWavData : @types.UInt8
}

pub enum Waveform {
  SawTriangle
  PulseTriangle
  PulseSawtooth
  PulseSawTriangle
}
impl Eq for Waveform

// Type aliases

// Traits

